{"version":3,"sources":["features/users/UserList.js","features/users/FakeData.js","App.js","reportWebVitals.js","index.js"],"names":["userSlice","createSlice","name","initialState","value","id","username","reducers","addUser","state","action","push","payload","deleteUser","filter","user","updateUsername","map","_userSlice$actions","actions","App","dispatch","useDispatch","userList","useSelector","users","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setUsername","_useState5","_useState6","newUsername","setNewUsername","React","createElement","className","type","placeholder","onChange","event","target","onClick","length","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","usersReducer","ReactDOM","createRoot","document","getElementById","render","StrictMode","Provider"],"mappings":"yOAKaA,EAAYC,YAAY,CACjCC,KAAM,QACNC,aAAc,CAAEC,MCPE,CAClB,CACIC,GAAG,EACHH,KAAK,QACLI,SAAS,UDIbC,SAAU,CACNC,QAAS,SAACC,EAAOC,GAEbD,EAAML,MAAMO,KAAKD,EAAOE,UAE5BC,WAAY,SAACJ,EAAOC,GAChBD,EAAML,MAAOK,EAAML,MAAMU,OAAO,SAACC,GAAI,OAAIA,EAAKV,KAAMK,EAAOE,QAAQP,MAEvEW,eAAe,SAACP,EAAOC,GACnBD,EAAML,MAAMa,IAAI,SAACF,GACVA,EAAKV,KAAOK,EAAOE,QAAQP,KAC1BU,EAAKT,SAAUI,EAAOE,QAAQN,gBAKhDY,EAEqDlB,EAAUmB,QAAlDX,EAAOU,EAAPV,QAASK,EAAUK,EAAVL,WAAYG,EAAcE,EAAdF,eACrBhB,IAAiB,qBEqBjBoB,MAvCf,WACE,IAAMC,EAAWC,cACXC,EAAWC,YAAY,SAACf,GAAK,OAAKA,EAAMgB,MAAMrB,QAAMsB,EAElCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BxB,EAAI0B,EAAA,GAAEE,EAAOF,EAAA,GAAAG,EACYJ,mBAAS,IAAGK,EAAAH,YAAAE,EAAA,GAArCzB,EAAQ0B,EAAA,GAAEC,EAAWD,EAAA,GAAAE,EACUP,mBAAS,IAAGQ,EAAAN,YAAAK,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElC,OACEG,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,UAAUC,SAAU,SAACC,GAAYd,EAAQc,EAAMC,OAAOzC,UACrFkC,IAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,cAAcC,SAAU,SAACC,GAAYX,EAAYW,EAAMC,OAAOzC,UAC7FkC,IAAAC,cAAA,UAAQO,QAAS,WAAQzB,EAASb,EAAQ,CAAEH,GAAIkB,EAASA,EAASwB,OAAS,GAAG1C,GAAK,EAAGH,OAAMI,gBAAgB,aAE9GgC,IAAAC,cAAA,OAAKC,UAAU,gBACZjB,EAASN,IAAI,SAACF,GACb,OAAQuB,IAAAC,cAAA,WACND,IAAAC,cAAA,UAAKxB,EAAKb,MACVoC,IAAAC,cAAA,UAAKxB,EAAKT,UACVgC,IAAAC,cAAA,SAAOC,UAAU,QAAQC,KAAK,OAAOC,YAAY,kBAC/CC,SAAU,SAACC,GACTP,EAAeO,EAAMC,OAAOzC,UAGhCkC,IAAAC,cAAA,UAAQC,UAAU,SAASM,QAAS,WAClCzB,EAASL,EAAe,CAAEX,GAAIU,EAAKV,GAAIC,SAAU8B,OAChD,mBACHE,IAAAC,cAAA,UAAQC,UAAU,SAASM,QAAS,WAClCzB,EAASR,EAAW,CAAER,GAAIU,EAAKV,QAC9B,qBC3BA2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCGRY,EAAOC,YAAe,CAC1BC,QAAQ,CACPtC,MAAMuC,KAIIC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/B,IAAAC,cAACD,IAAMgC,WAAU,KACfhC,IAAAC,cAACgC,IAAQ,CAACV,MAAOA,GACjBvB,IAAAC,cAACnB,EAAG,SAQR4B","file":"static/js/main.e72cb196.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CreateSlice, createSlice } from '@reduxjs/toolkit';\r\nimport { UserData } from './FakeData';\r\n// createSlice() uses the Immer library internally to turn mutating code into immutable updates.\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"users\",\r\n    initialState: { value: UserData },\r\n    reducers: {\r\n        addUser: (state, action) => {\r\n            //write code for adding a user\r\n            state.value.push(action.payload) //this qwill add new user\r\n        },\r\n        deleteUser: (state, action) => {\r\n            state.value= state.value.filter((user)=> user.id !==action.payload.id)\r\n        }, \r\n        updateUsername:(state, action) =>{\r\n            state.value.map((user)=>{\r\n                if(user.id === action.payload.id){\r\n                    user.username= action.payload.username\r\n                }\r\n            })\r\n        }\r\n    }\r\n})\r\n\r\nexport const { addUser, deleteUser, updateUsername } = userSlice.actions //exporting all the action in userSlice \r\nexport default userSlice.reducer","export const UserData=[\r\n    {\r\n        id:1,\r\n        name:\"Aisha\",\r\n        username:\"aish\"\r\n    }\r\n]","import React, { Component } from 'react';\nimport UserList from \"./features/users/UserList\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from 'react';\nimport { addUser, deleteUser, updateUsername } from './features/users/UserList';\nimport \"./App.css\";\n\n//useDispatch: is used when u have component and u want to do some action\n//useSelector: is used when u want to read one of the state value  which u have created in create store\nfunction App() {\n  const dispatch = useDispatch()\n  const userList = useSelector((state) => state.users.value)\n\n  const [name, setName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [newUsername, setNewUsername] = useState(\"\")\n\n  return (\n    <div className=\"App\">\n      <div className=\"addUser\">\n        <input type=\"text\" placeholder=\"Name...\" onChange={(event) => { setName(event.target.value) }} />\n        <input type=\"text\" placeholder=\"Username...\" onChange={(event) => { setUsername(event.target.value) }} />\n        <button onClick={() => { dispatch(addUser({ id: userList[userList.length - 1].id + 1, name, username })) }}>Add User</button>\n      </div>\n      <div className=\"displayUsers\">\n        {userList.map((user) => {\n          return (<div>\n            <h1>{user.name}</h1>\n            <h1>{user.username}</h1>\n            <input className='input' type=\"text\" placeholder=\"New Username...\"\n              onChange={(event) => {\n                setNewUsername(event.target.value)\n\n              }} />\n            <button className='button' onClick={() => {\n              dispatch(updateUsername({ id: user.id, username: newUsername }))\n            }}>Update Username</button>\n            <button className='button' onClick={() => {\n              dispatch(deleteUser({ id: user.id }));\n            }}>Delete User</button>\n          </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {configureStore} from \"@reduxjs/toolkit\"\nimport { Provider } from 'react-redux';\n//import { ReactDOM } from 'react';\nimport usersReducer from './features/users/UserList'\n\nconst store= configureStore({\n  reducer:{\n   users:usersReducer\n  }\n})\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}> \n    <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}